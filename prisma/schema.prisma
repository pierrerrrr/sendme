// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // gera automaticamente um UUID no banco de dados
  clerkid      String         @unique
  email        String         @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime       @default(now())
  subscription Subscription?
  integrations Integrations[]
  automation   Automation[]
}

model Subscription {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade) // estou criando a relação com o modelo de usuário
  userId String? @unique @db.Uuid
}

model Integrations {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS @default(INSTAGRAM)
  createdAt   DateTime     @default(now())
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade) // estou criando a relação com o modelo de usuário
  userId      String?      @db.Uuid
  token       String       @unique
  expireAt    DateTime?
  instagramId String?      @unique
}

model Automation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("Untitled")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade) // estou criando a relação com o modelo de usuário
  userId    String?   @db.Uuid
  keywords  Keyword[]
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId       String
  caption      String?
  media        String
  mediatype    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Listener {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @unique @db.Uuid
  listener     LISTENERS   @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int         @default(0)
  commentCount Int         @default(0)
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createAt     DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Trigger {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         TRIGGER_TYPES @default(DM)
  Automation   Automation?   @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?       @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word])
}

// enum
enum SUBSCRIPTION_PLANS {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CARROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

enum TRIGGER_TYPES {
  DM
  COMMENT
}
